{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/convert/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport sharp from 'sharp';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    const format = formData.get('format') as string;\n    const quality = parseInt(formData.get('quality') as string) || 80;\n\n    // Validate inputs\n    if (!file) {\n      return NextResponse.json(\n        { error: 'No file provided' },\n        { status: 400 }\n      );\n    }\n\n    if (!['avif', 'webp'].includes(format)) {\n      return NextResponse.json(\n        { error: 'Invalid format. Only AVIF and WebP are supported.' },\n        { status: 400 }\n      );\n    }\n\n    if (quality < 1 || quality > 100) {\n      return NextResponse.json(\n        { error: 'Quality must be between 1 and 100' },\n        { status: 400 }\n      );\n    }\n\n    // Convert file to buffer\n    const arrayBuffer = await file.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n\n    // Process image with Sharp\n    let processedImage;\n    let contentType;\n\n    if (format === 'avif') {\n      processedImage = await sharp(buffer)\n        .avif({ quality })\n        .toBuffer();\n      contentType = 'image/avif';\n    } else {\n      processedImage = await sharp(buffer)\n        .webp({ quality })\n        .toBuffer();\n      contentType = 'image/webp';\n    }\n\n    // Return the converted image\n    return new NextResponse(processedImage, {\n      status: 200,\n      headers: {\n        'Content-Type': contentType,\n        'Content-Disposition': `attachment; filename=\"converted.${format}\"`,\n        'Content-Length': processedImage.length.toString(),\n      },\n    });\n\n  } catch (error) {\n    console.error('Image conversion error:', error);\n    return NextResponse.json(\n      { error: 'Failed to convert image. Please try again.' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,MAAM,SAAS,SAAS,GAAG,CAAC;QAC5B,MAAM,UAAU,SAAS,SAAS,GAAG,CAAC,eAAyB;QAE/D,kBAAkB;QAClB,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC;YAAC;YAAQ;SAAO,CAAC,QAAQ,CAAC,SAAS;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoD,GAC7D;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,UAAU,KAAK,UAAU,KAAK;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,yBAAyB;QACzB,MAAM,cAAc,MAAM,KAAK,WAAW;QAC1C,MAAM,SAAS,OAAO,IAAI,CAAC;QAE3B,2BAA2B;QAC3B,IAAI;QACJ,IAAI;QAEJ,IAAI,WAAW,QAAQ;YACrB,iBAAiB,MAAM,CAAA,GAAA,mGAAA,CAAA,UAAK,AAAD,EAAE,QAC1B,IAAI,CAAC;gBAAE;YAAQ,GACf,QAAQ;YACX,cAAc;QAChB,OAAO;YACL,iBAAiB,MAAM,CAAA,GAAA,mGAAA,CAAA,UAAK,AAAD,EAAE,QAC1B,IAAI,CAAC;gBAAE;YAAQ,GACf,QAAQ;YACX,cAAc;QAChB;QAEA,6BAA6B;QAC7B,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,gBAAgB;YACtC,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB,CAAC,gCAAgC,EAAE,OAAO,CAAC,CAAC;gBACnE,kBAAkB,eAAe,MAAM,CAAC,QAAQ;YAClD;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6C,GACtD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}